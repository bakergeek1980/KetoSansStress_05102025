{"dependencies":[{"name":"internmap","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":36,"index":36}}],"key":"9MGTQAuKkWpinSfCDBvLyXQexsA=","exportNames":["*"],"imports":1}},{"name":"./identity.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":37},"end":{"line":2,"column":37,"index":74}}],"key":"O0JoHceaJLyVMfNwgBaWtgzogWA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return group;\n    }\n  });\n  exports.groups = groups;\n  exports.flatGroup = flatGroup;\n  exports.flatRollup = flatRollup;\n  exports.rollup = rollup;\n  exports.rollups = rollups;\n  exports.index = index;\n  exports.indexes = indexes;\n  var _internmap = require(_dependencyMap[0], \"internmap\");\n  var _identityJs = require(_dependencyMap[1], \"./identity.js\");\n  var identity = _interopDefault(_identityJs);\n  function group(values, ...keys) {\n    return nest(values, identity.default, identity.default, keys);\n  }\n  function groups(values, ...keys) {\n    return nest(values, Array.from, identity.default, keys);\n  }\n  function flatten(groups, keys) {\n    for (let i = 1, n = keys.length; i < n; ++i) {\n      groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));\n    }\n    return groups;\n  }\n  function flatGroup(values, ...keys) {\n    return flatten(groups(values, ...keys), keys);\n  }\n  function flatRollup(values, reduce, ...keys) {\n    return flatten(rollups(values, reduce, ...keys), keys);\n  }\n  function rollup(values, reduce, ...keys) {\n    return nest(values, identity.default, reduce, keys);\n  }\n  function rollups(values, reduce, ...keys) {\n    return nest(values, Array.from, reduce, keys);\n  }\n  function index(values, ...keys) {\n    return nest(values, identity.default, unique, keys);\n  }\n  function indexes(values, ...keys) {\n    return nest(values, Array.from, unique, keys);\n  }\n  function unique(values) {\n    if (values.length !== 1) throw new Error(\"duplicate key\");\n    return values[0];\n  }\n  function nest(values, map, reduce, keys) {\n    return function regroup(values, i) {\n      if (i >= keys.length) return reduce(values);\n      const groups = new _internmap.InternMap();\n      const keyof = keys[i++];\n      let index = -1;\n      for (const value of values) {\n        const key = keyof(value, ++index, values);\n        const group = groups.get(key);\n        if (group) group.push(value);else groups.set(key, [value]);\n      }\n      for (const [key, values] of groups) {\n        groups.set(key, regroup(values, i));\n      }\n      return map(groups);\n    }(values, 0);\n  }\n});","lineCount":79,"map":[[12,2,4,15,"Object"],[12,8,4,15],[12,9,4,15,"defineProperty"],[12,23,4,15],[12,24,4,15,"exports"],[12,31,4,15],[13,4,4,15,"enumerable"],[13,14,4,15],[14,4,4,15,"get"],[14,7,4,15],[14,18,4,15,"get"],[14,19,4,15],[15,6,4,15],[15,13,4,15,"group"],[15,18,4,15],[16,4,4,15],[17,2,4,15],[18,2,8,0,"exports"],[18,9,8,0],[18,10,8,0,"groups"],[18,16,8,0],[18,19,8,0,"groups"],[18,25,8,0],[19,2,19,0,"exports"],[19,9,19,0],[19,10,19,0,"flatGroup"],[19,19,19,0],[19,22,19,0,"flatGroup"],[19,31,19,0],[20,2,23,0,"exports"],[20,9,23,0],[20,10,23,0,"flatRollup"],[20,20,23,0],[20,23,23,0,"flatRollup"],[20,33,23,0],[21,2,27,0,"exports"],[21,9,27,0],[21,10,27,0,"rollup"],[21,16,27,0],[21,19,27,0,"rollup"],[21,25,27,0],[22,2,31,0,"exports"],[22,9,31,0],[22,10,31,0,"rollups"],[22,17,31,0],[22,20,31,0,"rollups"],[22,27,31,0],[23,2,35,0,"exports"],[23,9,35,0],[23,10,35,0,"index"],[23,15,35,0],[23,18,35,0,"index"],[23,23,35,0],[24,2,39,0,"exports"],[24,9,39,0],[24,10,39,0,"indexes"],[24,17,39,0],[24,20,39,0,"indexes"],[24,27,39,0],[25,2,1,0],[25,6,1,0,"_internmap"],[25,16,1,0],[25,19,1,0,"require"],[25,26,1,0],[25,27,1,0,"_dependencyMap"],[25,41,1,0],[26,2,2,0],[26,6,2,0,"_identityJs"],[26,17,2,0],[26,20,2,0,"require"],[26,27,2,0],[26,28,2,0,"_dependencyMap"],[26,42,2,0],[27,2,2,0],[27,6,2,0,"identity"],[27,14,2,0],[27,17,2,0,"_interopDefault"],[27,32,2,0],[27,33,2,0,"_identityJs"],[27,44,2,0],[28,2,4,15],[28,11,4,24,"group"],[28,16,4,29,"group"],[28,17,4,30,"values"],[28,23,4,36],[28,25,4,38],[28,28,4,41,"keys"],[28,32,4,45],[28,34,4,47],[29,4,5,2],[29,11,5,9,"nest"],[29,15,5,13],[29,16,5,14,"values"],[29,22,5,20],[29,24,5,22,"identity"],[29,32,5,30],[29,33,5,30,"default"],[29,40,5,30],[29,42,5,32,"identity"],[29,50,5,40],[29,51,5,40,"default"],[29,58,5,40],[29,60,5,42,"keys"],[29,64,5,46],[29,65,5,47],[30,2,6,0],[31,2,8,7],[31,11,8,16,"groups"],[31,17,8,22,"groups"],[31,18,8,23,"values"],[31,24,8,29],[31,26,8,31],[31,29,8,34,"keys"],[31,33,8,38],[31,35,8,40],[32,4,9,2],[32,11,9,9,"nest"],[32,15,9,13],[32,16,9,14,"values"],[32,22,9,20],[32,24,9,22,"Array"],[32,29,9,27],[32,30,9,28,"from"],[32,34,9,32],[32,36,9,34,"identity"],[32,44,9,42],[32,45,9,42,"default"],[32,52,9,42],[32,54,9,44,"keys"],[32,58,9,48],[32,59,9,49],[33,2,10,0],[34,2,12,0],[34,11,12,9,"flatten"],[34,18,12,16,"flatten"],[34,19,12,17,"groups"],[34,25,12,23],[34,27,12,25,"keys"],[34,31,12,29],[34,33,12,31],[35,4,13,2],[35,9,13,7],[35,13,13,11,"i"],[35,14,13,12],[35,17,13,15],[35,18,13,16],[35,20,13,18,"n"],[35,21,13,19],[35,24,13,22,"keys"],[35,28,13,26],[35,29,13,27,"length"],[35,35,13,33],[35,37,13,35,"i"],[35,38,13,36],[35,41,13,39,"n"],[35,42,13,40],[35,44,13,42],[35,46,13,44,"i"],[35,47,13,45],[35,49,13,47],[36,6,14,4,"groups"],[36,12,14,10],[36,15,14,13,"groups"],[36,21,14,19],[36,22,14,20,"flatMap"],[36,29,14,27],[36,30,14,28,"g"],[36,31,14,29],[36,35,14,33,"g"],[36,36,14,34],[36,37,14,35,"pop"],[36,40,14,38],[36,41,14,39],[36,42,14,40],[36,43,14,41,"map"],[36,46,14,44],[36,47,14,45],[36,48,14,46],[36,49,14,47,"key"],[36,52,14,50],[36,54,14,52,"value"],[36,59,14,57],[36,60,14,58],[36,65,14,63],[36,66,14,64],[36,69,14,67,"g"],[36,70,14,68],[36,72,14,70,"key"],[36,75,14,73],[36,77,14,75,"value"],[36,82,14,80],[36,83,14,81],[36,84,14,82],[36,85,14,83],[37,4,15,2],[38,4,16,2],[38,11,16,9,"groups"],[38,17,16,15],[39,2,17,0],[40,2,19,7],[40,11,19,16,"flatGroup"],[40,20,19,25,"flatGroup"],[40,21,19,26,"values"],[40,27,19,32],[40,29,19,34],[40,32,19,37,"keys"],[40,36,19,41],[40,38,19,43],[41,4,20,2],[41,11,20,9,"flatten"],[41,18,20,16],[41,19,20,17,"groups"],[41,25,20,23],[41,26,20,24,"values"],[41,32,20,30],[41,34,20,32],[41,37,20,35,"keys"],[41,41,20,39],[41,42,20,40],[41,44,20,42,"keys"],[41,48,20,46],[41,49,20,47],[42,2,21,0],[43,2,23,7],[43,11,23,16,"flatRollup"],[43,21,23,26,"flatRollup"],[43,22,23,27,"values"],[43,28,23,33],[43,30,23,35,"reduce"],[43,36,23,41],[43,38,23,43],[43,41,23,46,"keys"],[43,45,23,50],[43,47,23,52],[44,4,24,2],[44,11,24,9,"flatten"],[44,18,24,16],[44,19,24,17,"rollups"],[44,26,24,24],[44,27,24,25,"values"],[44,33,24,31],[44,35,24,33,"reduce"],[44,41,24,39],[44,43,24,41],[44,46,24,44,"keys"],[44,50,24,48],[44,51,24,49],[44,53,24,51,"keys"],[44,57,24,55],[44,58,24,56],[45,2,25,0],[46,2,27,7],[46,11,27,16,"rollup"],[46,17,27,22,"rollup"],[46,18,27,23,"values"],[46,24,27,29],[46,26,27,31,"reduce"],[46,32,27,37],[46,34,27,39],[46,37,27,42,"keys"],[46,41,27,46],[46,43,27,48],[47,4,28,2],[47,11,28,9,"nest"],[47,15,28,13],[47,16,28,14,"values"],[47,22,28,20],[47,24,28,22,"identity"],[47,32,28,30],[47,33,28,30,"default"],[47,40,28,30],[47,42,28,32,"reduce"],[47,48,28,38],[47,50,28,40,"keys"],[47,54,28,44],[47,55,28,45],[48,2,29,0],[49,2,31,7],[49,11,31,16,"rollups"],[49,18,31,23,"rollups"],[49,19,31,24,"values"],[49,25,31,30],[49,27,31,32,"reduce"],[49,33,31,38],[49,35,31,40],[49,38,31,43,"keys"],[49,42,31,47],[49,44,31,49],[50,4,32,2],[50,11,32,9,"nest"],[50,15,32,13],[50,16,32,14,"values"],[50,22,32,20],[50,24,32,22,"Array"],[50,29,32,27],[50,30,32,28,"from"],[50,34,32,32],[50,36,32,34,"reduce"],[50,42,32,40],[50,44,32,42,"keys"],[50,48,32,46],[50,49,32,47],[51,2,33,0],[52,2,35,7],[52,11,35,16,"index"],[52,16,35,21,"index"],[52,17,35,22,"values"],[52,23,35,28],[52,25,35,30],[52,28,35,33,"keys"],[52,32,35,37],[52,34,35,39],[53,4,36,2],[53,11,36,9,"nest"],[53,15,36,13],[53,16,36,14,"values"],[53,22,36,20],[53,24,36,22,"identity"],[53,32,36,30],[53,33,36,30,"default"],[53,40,36,30],[53,42,36,32,"unique"],[53,48,36,38],[53,50,36,40,"keys"],[53,54,36,44],[53,55,36,45],[54,2,37,0],[55,2,39,7],[55,11,39,16,"indexes"],[55,18,39,23,"indexes"],[55,19,39,24,"values"],[55,25,39,30],[55,27,39,32],[55,30,39,35,"keys"],[55,34,39,39],[55,36,39,41],[56,4,40,2],[56,11,40,9,"nest"],[56,15,40,13],[56,16,40,14,"values"],[56,22,40,20],[56,24,40,22,"Array"],[56,29,40,27],[56,30,40,28,"from"],[56,34,40,32],[56,36,40,34,"unique"],[56,42,40,40],[56,44,40,42,"keys"],[56,48,40,46],[56,49,40,47],[57,2,41,0],[58,2,43,0],[58,11,43,9,"unique"],[58,17,43,15,"unique"],[58,18,43,16,"values"],[58,24,43,22],[58,26,43,24],[59,4,44,2],[59,8,44,6,"values"],[59,14,44,12],[59,15,44,13,"length"],[59,21,44,19],[59,26,44,24],[59,27,44,25],[59,29,44,27],[59,35,44,33],[59,39,44,37,"Error"],[59,44,44,42],[59,45,44,43],[59,60,44,58],[59,61,44,59],[60,4,45,2],[60,11,45,9,"values"],[60,17,45,15],[60,18,45,16],[60,19,45,17],[60,20,45,18],[61,2,46,0],[62,2,48,0],[62,11,48,9,"nest"],[62,15,48,13,"nest"],[62,16,48,14,"values"],[62,22,48,20],[62,24,48,22,"map"],[62,27,48,25],[62,29,48,27,"reduce"],[62,35,48,33],[62,37,48,35,"keys"],[62,41,48,39],[62,43,48,41],[63,4,49,2],[63,11,49,10],[63,20,49,19,"regroup"],[63,27,49,26,"regroup"],[63,28,49,27,"values"],[63,34,49,33],[63,36,49,35,"i"],[63,37,49,36],[63,39,49,38],[64,6,50,4],[64,10,50,8,"i"],[64,11,50,9],[64,15,50,13,"keys"],[64,19,50,17],[64,20,50,18,"length"],[64,26,50,24],[64,28,50,26],[64,35,50,33,"reduce"],[64,41,50,39],[64,42,50,40,"values"],[64,48,50,46],[64,49,50,47],[65,6,51,4],[65,12,51,10,"groups"],[65,18,51,16],[65,21,51,19],[65,25,51,23,"InternMap"],[65,35,51,32],[65,36,51,32,"InternMap"],[65,45,51,32],[65,46,51,33],[65,47,51,34],[66,6,52,4],[66,12,52,10,"keyof"],[66,17,52,15],[66,20,52,18,"keys"],[66,24,52,22],[66,25,52,23,"i"],[66,26,52,24],[66,28,52,26],[66,29,52,27],[67,6,53,4],[67,10,53,8,"index"],[67,15,53,13],[67,18,53,16],[67,19,53,17],[67,20,53,18],[68,6,54,4],[68,11,54,9],[68,17,54,15,"value"],[68,22,54,20],[68,26,54,24,"values"],[68,32,54,30],[68,34,54,32],[69,8,55,6],[69,14,55,12,"key"],[69,17,55,15],[69,20,55,18,"keyof"],[69,25,55,23],[69,26,55,24,"value"],[69,31,55,29],[69,33,55,31],[69,35,55,33,"index"],[69,40,55,38],[69,42,55,40,"values"],[69,48,55,46],[69,49,55,47],[70,8,56,6],[70,14,56,12,"group"],[70,19,56,17],[70,22,56,20,"groups"],[70,28,56,26],[70,29,56,27,"get"],[70,32,56,30],[70,33,56,31,"key"],[70,36,56,34],[70,37,56,35],[71,8,57,6],[71,12,57,10,"group"],[71,17,57,15],[71,19,57,17,"group"],[71,24,57,22],[71,25,57,23,"push"],[71,29,57,27],[71,30,57,28,"value"],[71,35,57,33],[71,36,57,34],[71,37,57,35],[71,42,58,11,"groups"],[71,48,58,17],[71,49,58,18,"set"],[71,52,58,21],[71,53,58,22,"key"],[71,56,58,25],[71,58,58,27],[71,59,58,28,"value"],[71,64,58,33],[71,65,58,34],[71,66,58,35],[72,6,59,4],[73,6,60,4],[73,11,60,9],[73,17,60,15],[73,18,60,16,"key"],[73,21,60,19],[73,23,60,21,"values"],[73,29,60,27],[73,30,60,28],[73,34,60,32,"groups"],[73,40,60,38],[73,42,60,40],[74,8,61,6,"groups"],[74,14,61,12],[74,15,61,13,"set"],[74,18,61,16],[74,19,61,17,"key"],[74,22,61,20],[74,24,61,22,"regroup"],[74,31,61,29],[74,32,61,30,"values"],[74,38,61,36],[74,40,61,38,"i"],[74,41,61,39],[74,42,61,40],[74,43,61,41],[75,6,62,4],[76,6,63,4],[76,13,63,11,"map"],[76,16,63,14],[76,17,63,15,"groups"],[76,23,63,21],[76,24,63,22],[77,4,64,2],[77,5,64,3],[77,6,64,5,"values"],[77,12,64,11],[77,14,64,13],[77,15,64,14],[77,16,64,15],[78,2,65,0],[79,0,65,1],[79,3]],"functionMap":{"names":["<global>","group","groups","flatten","groups.flatMap$argument_0","g.pop.map$argument_0","flatGroup","flatRollup","rollup","rollups","index","indexes","unique","nest","regroup"],"mappings":"AAA;eCG;CDE;OEE;CFE;AGE;4BCE,iBC,oCD,CD;CHG;OME;CNE;OOE;CPE;OQE;CRE;OSE;CTE;OUE;CVE;OWE;CXE;AYE;CZG;AaE;UCC;GDe;CbC"},"hasCjsExports":false},"type":"js/module"}]}