{"dependencies":[{"name":"d3-array","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":35,"index":35}}],"key":"6/g0OmizGembrwGL3ynTnrgY1Es=","exportNames":["*"],"imports":1}},{"name":"./init.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":36,"index":72}}],"key":"T/z5w4vOvjDtodMXYiKznwC3zLs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return ordinal;\n    }\n  });\n  Object.defineProperty(exports, \"implicit\", {\n    enumerable: true,\n    get: function () {\n      return implicit;\n    }\n  });\n  var _d3Array = require(_dependencyMap[0], \"d3-array\");\n  var _initJs = require(_dependencyMap[1], \"./init.js\");\n  const implicit = Symbol(\"implicit\");\n  function ordinal() {\n    var index = new _d3Array.InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n    function scale(d) {\n      let i = index.get(d);\n      if (i === undefined) {\n        if (unknown !== implicit) return unknown;\n        index.set(d, i = domain.push(d) - 1);\n      }\n      return range[i % range.length];\n    }\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = new _d3Array.InternMap();\n      for (const value of _) {\n        if (index.has(value)) continue;\n        index.set(value, domain.push(value) - 1);\n      }\n      return scale;\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), scale) : range.slice();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.copy = function () {\n      return ordinal(domain, range).unknown(unknown);\n    };\n    _initJs.initRange.apply(scale, arguments);\n    return scale;\n  }\n});","lineCount":56,"map":[[7,2,6,15,"Object"],[7,8,6,15],[7,9,6,15,"defineProperty"],[7,23,6,15],[7,24,6,15,"exports"],[7,31,6,15],[8,4,6,15,"enumerable"],[8,14,6,15],[9,4,6,15,"get"],[9,7,6,15],[9,18,6,15,"get"],[9,19,6,15],[10,6,6,15],[10,13,6,15,"ordinal"],[10,20,6,15],[11,4,6,15],[12,2,6,15],[13,2,4,0,"Object"],[13,8,4,0],[13,9,4,0,"defineProperty"],[13,23,4,0],[13,24,4,0,"exports"],[13,31,4,0],[14,4,4,0,"enumerable"],[14,14,4,0],[15,4,4,0,"get"],[15,7,4,0],[15,18,4,0,"get"],[15,19,4,0],[16,6,4,0],[16,13,4,0,"implicit"],[16,21,4,0],[17,4,4,0],[18,2,4,0],[19,2,1,0],[19,6,1,0,"_d3Array"],[19,14,1,0],[19,17,1,0,"require"],[19,24,1,0],[19,25,1,0,"_dependencyMap"],[19,39,1,0],[20,2,2,0],[20,6,2,0,"_initJs"],[20,13,2,0],[20,16,2,0,"require"],[20,23,2,0],[20,24,2,0,"_dependencyMap"],[20,38,2,0],[21,2,4,7],[21,8,4,13,"implicit"],[21,16,4,21],[21,19,4,24,"Symbol"],[21,25,4,30],[21,26,4,31],[21,36,4,41],[21,37,4,42],[22,2,6,15],[22,11,6,24,"ordinal"],[22,18,6,31,"ordinal"],[22,19,6,31],[22,21,6,34],[23,4,7,2],[23,8,7,6,"index"],[23,13,7,11],[23,16,7,14],[23,20,7,18,"InternMap"],[23,28,7,27],[23,29,7,27,"InternMap"],[23,38,7,27],[23,39,7,28],[23,40,7,29],[24,6,8,6,"domain"],[24,12,8,12],[24,15,8,15],[24,17,8,17],[25,6,9,6,"range"],[25,11,9,11],[25,14,9,14],[25,16,9,16],[26,6,10,6,"unknown"],[26,13,10,13],[26,16,10,16,"implicit"],[26,24,10,24],[27,4,12,2],[27,13,12,11,"scale"],[27,18,12,16,"scale"],[27,19,12,17,"d"],[27,20,12,18],[27,22,12,20],[28,6,13,4],[28,10,13,8,"i"],[28,11,13,9],[28,14,13,12,"index"],[28,19,13,17],[28,20,13,18,"get"],[28,23,13,21],[28,24,13,22,"d"],[28,25,13,23],[28,26,13,24],[29,6,14,4],[29,10,14,8,"i"],[29,11,14,9],[29,16,14,14,"undefined"],[29,25,14,23],[29,27,14,25],[30,8,15,6],[30,12,15,10,"unknown"],[30,19,15,17],[30,24,15,22,"implicit"],[30,32,15,30],[30,34,15,32],[30,41,15,39,"unknown"],[30,48,15,46],[31,8,16,6,"index"],[31,13,16,11],[31,14,16,12,"set"],[31,17,16,15],[31,18,16,16,"d"],[31,19,16,17],[31,21,16,19,"i"],[31,22,16,20],[31,25,16,23,"domain"],[31,31,16,29],[31,32,16,30,"push"],[31,36,16,34],[31,37,16,35,"d"],[31,38,16,36],[31,39,16,37],[31,42,16,40],[31,43,16,41],[31,44,16,42],[32,6,17,4],[33,6,18,4],[33,13,18,11,"range"],[33,18,18,16],[33,19,18,17,"i"],[33,20,18,18],[33,23,18,21,"range"],[33,28,18,26],[33,29,18,27,"length"],[33,35,18,33],[33,36,18,34],[34,4,19,2],[35,4,21,2,"scale"],[35,9,21,7],[35,10,21,8,"domain"],[35,16,21,14],[35,19,21,17],[35,29,21,26,"_"],[35,30,21,27],[35,32,21,29],[36,6,22,4],[36,10,22,8],[36,11,22,9,"arguments"],[36,20,22,18],[36,21,22,19,"length"],[36,27,22,25],[36,29,22,27],[36,36,22,34,"domain"],[36,42,22,40],[36,43,22,41,"slice"],[36,48,22,46],[36,49,22,47],[36,50,22,48],[37,6,23,4,"domain"],[37,12,23,10],[37,15,23,13],[37,17,23,15],[37,19,23,17,"index"],[37,24,23,22],[37,27,23,25],[37,31,23,29,"InternMap"],[37,39,23,38],[37,40,23,38,"InternMap"],[37,49,23,38],[37,50,23,39],[37,51,23,40],[38,6,24,4],[38,11,24,9],[38,17,24,15,"value"],[38,22,24,20],[38,26,24,24,"_"],[38,27,24,25],[38,29,24,27],[39,8,25,6],[39,12,25,10,"index"],[39,17,25,15],[39,18,25,16,"has"],[39,21,25,19],[39,22,25,20,"value"],[39,27,25,25],[39,28,25,26],[39,30,25,28],[40,8,26,6,"index"],[40,13,26,11],[40,14,26,12,"set"],[40,17,26,15],[40,18,26,16,"value"],[40,23,26,21],[40,25,26,23,"domain"],[40,31,26,29],[40,32,26,30,"push"],[40,36,26,34],[40,37,26,35,"value"],[40,42,26,40],[40,43,26,41],[40,46,26,44],[40,47,26,45],[40,48,26,46],[41,6,27,4],[42,6,28,4],[42,13,28,11,"scale"],[42,18,28,16],[43,4,29,2],[43,5,29,3],[44,4,31,2,"scale"],[44,9,31,7],[44,10,31,8,"range"],[44,15,31,13],[44,18,31,16],[44,28,31,25,"_"],[44,29,31,26],[44,31,31,28],[45,6,32,4],[45,13,32,11,"arguments"],[45,22,32,20],[45,23,32,21,"length"],[45,29,32,27],[45,33,32,31,"range"],[45,38,32,36],[45,41,32,39,"Array"],[45,46,32,44],[45,47,32,45,"from"],[45,51,32,49],[45,52,32,50,"_"],[45,53,32,51],[45,54,32,52],[45,56,32,54,"scale"],[45,61,32,59],[45,65,32,63,"range"],[45,70,32,68],[45,71,32,69,"slice"],[45,76,32,74],[45,77,32,75],[45,78,32,76],[46,4,33,2],[46,5,33,3],[47,4,35,2,"scale"],[47,9,35,7],[47,10,35,8,"unknown"],[47,17,35,15],[47,20,35,18],[47,30,35,27,"_"],[47,31,35,28],[47,33,35,30],[48,6,36,4],[48,13,36,11,"arguments"],[48,22,36,20],[48,23,36,21,"length"],[48,29,36,27],[48,33,36,31,"unknown"],[48,40,36,38],[48,43,36,41,"_"],[48,44,36,42],[48,46,36,44,"scale"],[48,51,36,49],[48,55,36,53,"unknown"],[48,62,36,60],[49,4,37,2],[49,5,37,3],[50,4,39,2,"scale"],[50,9,39,7],[50,10,39,8,"copy"],[50,14,39,12],[50,17,39,15],[50,29,39,26],[51,6,40,4],[51,13,40,11,"ordinal"],[51,20,40,18],[51,21,40,19,"domain"],[51,27,40,25],[51,29,40,27,"range"],[51,34,40,32],[51,35,40,33],[51,36,40,34,"unknown"],[51,43,40,41],[51,44,40,42,"unknown"],[51,51,40,49],[51,52,40,50],[52,4,41,2],[52,5,41,3],[53,4,43,2,"initRange"],[53,11,43,11],[53,12,43,11,"initRange"],[53,21,43,11],[53,22,43,12,"apply"],[53,27,43,17],[53,28,43,18,"scale"],[53,33,43,23],[53,35,43,25,"arguments"],[53,44,43,34],[53,45,43,35],[54,4,45,2],[54,11,45,9,"scale"],[54,16,45,14],[55,2,46,0],[56,0,46,1],[56,3]],"functionMap":{"names":["<global>","ordinal","scale","scale.domain","scale.range","scale.unknown","scale.copy"],"mappings":"AAA;eCK;ECM;GDO;iBEE;GFQ;gBGE;GHE;kBIE;GJE;eKE;GLE;CDK"},"hasCjsExports":false},"type":"js/module"}]}