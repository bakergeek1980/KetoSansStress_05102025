{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getDomainFromTicks = exports.downsampleTicks = exports.DEFAULT_TICK_COUNT = void 0;\n  exports.DEFAULT_TICK_COUNT = 5;\n  function coerceNumArray(collection) {\n    return collection.map((item, idx) => Number.isNaN(Number(item)) ? idx : item);\n  }\n  const containsNonNumbers = arr => {\n    return Array.isArray(arr) && arr.some(t => Number.isNaN(Number(t)));\n  };\n  const downsampleTicks = (tickValues, tickCount) => {\n    if (containsNonNumbers(tickValues)) {\n      // Throw Error here until we expand tickValues to accept string and date types, like Victory web\n      throw new Error(\"TickValues array must only contain numbers.\");\n    }\n    if (!tickCount || !Array.isArray(tickValues) || tickValues.length <= tickCount) {\n      return tickValues;\n    }\n    const k = Math.floor(tickValues.length / tickCount);\n    return tickValues.filter((_, i) => i % k === 0);\n  };\n  exports.downsampleTicks = downsampleTicks;\n  const getMinValue = arr => {\n    return Math.min(...arr);\n  };\n  const getMaxValue = arr => {\n    return Math.max(...arr);\n  };\n  const getDomainFromTicks = tickValues => {\n    // Check if undefined OR if its not an array of numbers\n    if (!tickValues) return;\n    let numTicksArr;\n    if (containsNonNumbers(tickValues)) {\n      // Currently, we should ONLY accept numbers in the tickValues array (accepting strings and dates TBD); however, we want to catch any non-numbers and coerce them to numbers for domain purposes.\n      numTicksArr = coerceNumArray(tickValues);\n    } else {\n      numTicksArr = tickValues;\n    }\n    const min = getMinValue(numTicksArr);\n    const max = getMaxValue(numTicksArr);\n    return [min, max];\n  };\n  exports.getDomainFromTicks = getDomainFromTicks;\n});","lineCount":48,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getDomainFromTicks"],[7,28,3,26],[7,31,3,29,"exports"],[7,38,3,36],[7,39,3,37,"downsampleTicks"],[7,54,3,52],[7,57,3,55,"exports"],[7,64,3,62],[7,65,3,63,"DEFAULT_TICK_COUNT"],[7,83,3,81],[7,86,3,84],[7,91,3,89],[7,92,3,90],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"DEFAULT_TICK_COUNT"],[8,28,4,26],[8,31,4,29],[8,32,4,30],[9,2,5,0],[9,11,5,9,"coerceNumArray"],[9,25,5,23,"coerceNumArray"],[9,26,5,24,"collection"],[9,36,5,34],[9,38,5,36],[10,4,6,4],[10,11,6,11,"collection"],[10,21,6,21],[10,22,6,22,"map"],[10,25,6,25],[10,26,6,26],[10,27,6,27,"item"],[10,31,6,31],[10,33,6,33,"idx"],[10,36,6,36],[10,41,6,41,"Number"],[10,47,6,47],[10,48,6,48,"isNaN"],[10,53,6,53],[10,54,6,54,"Number"],[10,60,6,60],[10,61,6,61,"item"],[10,65,6,65],[10,66,6,66],[10,67,6,67],[10,70,6,70,"idx"],[10,73,6,73],[10,76,6,76,"item"],[10,80,6,80],[10,81,6,81],[11,2,7,0],[12,2,8,0],[12,8,8,6,"containsNonNumbers"],[12,26,8,24],[12,29,8,28,"arr"],[12,32,8,31],[12,36,8,36],[13,4,9,4],[13,11,9,11,"Array"],[13,16,9,16],[13,17,9,17,"isArray"],[13,24,9,24],[13,25,9,25,"arr"],[13,28,9,28],[13,29,9,29],[13,33,9,33,"arr"],[13,36,9,36],[13,37,9,37,"some"],[13,41,9,41],[13,42,9,43,"t"],[13,43,9,44],[13,47,9,49,"Number"],[13,53,9,55],[13,54,9,56,"isNaN"],[13,59,9,61],[13,60,9,62,"Number"],[13,66,9,68],[13,67,9,69,"t"],[13,68,9,70],[13,69,9,71],[13,70,9,72],[13,71,9,73],[14,2,10,0],[14,3,10,1],[15,2,11,0],[15,8,11,6,"downsampleTicks"],[15,23,11,21],[15,26,11,24,"downsampleTicks"],[15,27,11,25,"tickValues"],[15,37,11,35],[15,39,11,37,"tickCount"],[15,48,11,46],[15,53,11,51],[16,4,12,4],[16,8,12,8,"containsNonNumbers"],[16,26,12,26],[16,27,12,27,"tickValues"],[16,37,12,37],[16,38,12,38],[16,40,12,40],[17,6,13,8],[18,6,14,8],[18,12,14,14],[18,16,14,18,"Error"],[18,21,14,23],[18,22,14,24],[18,67,14,69],[18,68,14,70],[19,4,15,4],[20,4,16,4],[20,8,16,8],[20,9,16,9,"tickCount"],[20,18,16,18],[20,22,17,8],[20,23,17,9,"Array"],[20,28,17,14],[20,29,17,15,"isArray"],[20,36,17,22],[20,37,17,23,"tickValues"],[20,47,17,33],[20,48,17,34],[20,52,18,8,"tickValues"],[20,62,18,18],[20,63,18,19,"length"],[20,69,18,25],[20,73,18,29,"tickCount"],[20,82,18,38],[20,84,18,40],[21,6,19,8],[21,13,19,15,"tickValues"],[21,23,19,25],[22,4,20,4],[23,4,21,4],[23,10,21,10,"k"],[23,11,21,11],[23,14,21,14,"Math"],[23,18,21,18],[23,19,21,19,"floor"],[23,24,21,24],[23,25,21,25,"tickValues"],[23,35,21,35],[23,36,21,36,"length"],[23,42,21,42],[23,45,21,45,"tickCount"],[23,54,21,54],[23,55,21,55],[24,4,22,4],[24,11,22,11,"tickValues"],[24,21,22,21],[24,22,22,22,"filter"],[24,28,22,28],[24,29,22,29],[24,30,22,30,"_"],[24,31,22,31],[24,33,22,33,"i"],[24,34,22,34],[24,39,22,39,"i"],[24,40,22,40],[24,43,22,43,"k"],[24,44,22,44],[24,49,22,49],[24,50,22,50],[24,51,22,51],[25,2,23,0],[25,3,23,1],[26,2,24,0,"exports"],[26,9,24,7],[26,10,24,8,"downsampleTicks"],[26,25,24,23],[26,28,24,26,"downsampleTicks"],[26,43,24,41],[27,2,25,0],[27,8,25,6,"getMinValue"],[27,19,25,17],[27,22,25,21,"arr"],[27,25,25,24],[27,29,25,29],[28,4,26,4],[28,11,26,11,"Math"],[28,15,26,15],[28,16,26,16,"min"],[28,19,26,19],[28,20,26,20],[28,23,26,23,"arr"],[28,26,26,26],[28,27,26,27],[29,2,27,0],[29,3,27,1],[30,2,28,0],[30,8,28,6,"getMaxValue"],[30,19,28,17],[30,22,28,21,"arr"],[30,25,28,24],[30,29,28,29],[31,4,29,4],[31,11,29,11,"Math"],[31,15,29,15],[31,16,29,16,"max"],[31,19,29,19],[31,20,29,20],[31,23,29,23,"arr"],[31,26,29,26],[31,27,29,27],[32,2,30,0],[32,3,30,1],[33,2,31,0],[33,8,31,6,"getDomainFromTicks"],[33,26,31,24],[33,29,31,28,"tickValues"],[33,39,31,38],[33,43,31,43],[34,4,32,4],[35,4,33,4],[35,8,33,8],[35,9,33,9,"tickValues"],[35,19,33,19],[35,21,34,8],[36,4,35,4],[36,8,35,8,"numTicksArr"],[36,19,35,19],[37,4,36,4],[37,8,36,8,"containsNonNumbers"],[37,26,36,26],[37,27,36,27,"tickValues"],[37,37,36,37],[37,38,36,38],[37,40,36,40],[38,6,37,8],[39,6,38,8,"numTicksArr"],[39,17,38,19],[39,20,38,22,"coerceNumArray"],[39,34,38,36],[39,35,38,37,"tickValues"],[39,45,38,47],[39,46,38,48],[40,4,39,4],[40,5,39,5],[40,11,40,9],[41,6,41,8,"numTicksArr"],[41,17,41,19],[41,20,41,22,"tickValues"],[41,30,41,32],[42,4,42,4],[43,4,43,4],[43,10,43,10,"min"],[43,13,43,13],[43,16,43,16,"getMinValue"],[43,27,43,27],[43,28,43,28,"numTicksArr"],[43,39,43,39],[43,40,43,40],[44,4,44,4],[44,10,44,10,"max"],[44,13,44,13],[44,16,44,16,"getMaxValue"],[44,27,44,27],[44,28,44,28,"numTicksArr"],[44,39,44,39],[44,40,44,40],[45,4,45,4],[45,11,45,11],[45,12,45,12,"min"],[45,15,45,15],[45,17,45,17,"max"],[45,20,45,20],[45,21,45,21],[46,2,46,0],[46,3,46,1],[47,2,47,0,"exports"],[47,9,47,7],[47,10,47,8,"getDomainFromTicks"],[47,28,47,26],[47,31,47,29,"getDomainFromTicks"],[47,49,47,47],[48,0,47,48],[48,3]],"functionMap":{"names":["<global>","coerceNumArray","collection.map$argument_0","containsNonNumbers","arr.some$argument_0","downsampleTicks","tickValues.filter$argument_0","getMinValue","getMaxValue","getDomainFromTicks"],"mappings":"AAA;ACI;0BCC,sDD;CDC;2BGC;0CCC,8BD;CHC;wBKC;6BCW,qBD;CLC;oBOE;CPE;oBQC;CRE;2BSC;CTe"},"hasCjsExports":true},"type":"js/module"}]}