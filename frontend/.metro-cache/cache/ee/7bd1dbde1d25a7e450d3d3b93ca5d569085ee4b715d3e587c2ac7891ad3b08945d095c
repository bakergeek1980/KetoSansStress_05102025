{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return transform;\n    }\n  });\n  exports.Transform = Transform;\n  Object.defineProperty(exports, \"identity\", {\n    enumerable: true,\n    get: function () {\n      return identity;\n    }\n  });\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function (k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function (x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function (point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function (x) {\n      return x * this.k + this.x;\n    },\n    applyY: function (y) {\n      return y * this.k + this.y;\n    },\n    invert: function (location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function (x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function (y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function (x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function (y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function () {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n  var identity = new Transform(1, 0, 0);\n  transform.prototype = Transform.prototype;\n  function transform(node) {\n    while (!node.__zoom) if (!(node = node.parentNode)) return identity;\n    return node.__zoom;\n  }\n});","lineCount":67,"map":[[7,2,48,15,"Object"],[7,8,48,15],[7,9,48,15,"defineProperty"],[7,23,48,15],[7,24,48,15,"exports"],[7,31,48,15],[8,4,48,15,"enumerable"],[8,14,48,15],[9,4,48,15,"get"],[9,7,48,15],[9,18,48,15,"get"],[9,19,48,15],[10,6,48,15],[10,13,48,15,"transform"],[10,22,48,15],[11,4,48,15],[12,2,48,15],[13,2,1,0,"exports"],[13,9,1,0],[13,10,1,0,"Transform"],[13,19,1,0],[13,22,1,0,"Transform"],[13,31,1,0],[14,2,44,0,"Object"],[14,8,44,0],[14,9,44,0,"defineProperty"],[14,23,44,0],[14,24,44,0,"exports"],[14,31,44,0],[15,4,44,0,"enumerable"],[15,14,44,0],[16,4,44,0,"get"],[16,7,44,0],[16,18,44,0,"get"],[16,19,44,0],[17,6,44,0],[17,13,44,0,"identity"],[17,21,44,0],[18,4,44,0],[19,2,44,0],[20,2,1,7],[20,11,1,16,"Transform"],[20,20,1,25,"Transform"],[20,21,1,26,"k"],[20,22,1,27],[20,24,1,29,"x"],[20,25,1,30],[20,27,1,32,"y"],[20,28,1,33],[20,30,1,35],[21,4,2,2],[21,8,2,6],[21,9,2,7,"k"],[21,10,2,8],[21,13,2,11,"k"],[21,14,2,12],[22,4,3,2],[22,8,3,6],[22,9,3,7,"x"],[22,10,3,8],[22,13,3,11,"x"],[22,14,3,12],[23,4,4,2],[23,8,4,6],[23,9,4,7,"y"],[23,10,4,8],[23,13,4,11,"y"],[23,14,4,12],[24,2,5,0],[25,2,7,0,"Transform"],[25,11,7,9],[25,12,7,10,"prototype"],[25,21,7,19],[25,24,7,22],[26,4,8,2,"constructor"],[26,15,8,13],[26,17,8,15,"Transform"],[26,26,8,24],[27,4,9,2,"scale"],[27,9,9,7],[27,11,9,9],[27,20,9,9,"scale"],[27,21,9,18,"k"],[27,22,9,19],[27,24,9,21],[28,6,10,4],[28,13,10,11,"k"],[28,14,10,12],[28,19,10,17],[28,20,10,18],[28,23,10,21],[28,27,10,25],[28,30,10,28],[28,34,10,32,"Transform"],[28,43,10,41],[28,44,10,42],[28,48,10,46],[28,49,10,47,"k"],[28,50,10,48],[28,53,10,51,"k"],[28,54,10,52],[28,56,10,54],[28,60,10,58],[28,61,10,59,"x"],[28,62,10,60],[28,64,10,62],[28,68,10,66],[28,69,10,67,"y"],[28,70,10,68],[28,71,10,69],[29,4,11,2],[29,5,11,3],[30,4,12,2,"translate"],[30,13,12,11],[30,15,12,13],[30,24,12,13,"translate"],[30,25,12,22,"x"],[30,26,12,23],[30,28,12,25,"y"],[30,29,12,26],[30,31,12,28],[31,6,13,4],[31,13,13,11,"x"],[31,14,13,12],[31,19,13,17],[31,20,13,18],[31,23,13,21,"y"],[31,24,13,22],[31,29,13,27],[31,30,13,28],[31,33,13,31],[31,37,13,35],[31,40,13,38],[31,44,13,42,"Transform"],[31,53,13,51],[31,54,13,52],[31,58,13,56],[31,59,13,57,"k"],[31,60,13,58],[31,62,13,60],[31,66,13,64],[31,67,13,65,"x"],[31,68,13,66],[31,71,13,69],[31,75,13,73],[31,76,13,74,"k"],[31,77,13,75],[31,80,13,78,"x"],[31,81,13,79],[31,83,13,81],[31,87,13,85],[31,88,13,86,"y"],[31,89,13,87],[31,92,13,90],[31,96,13,94],[31,97,13,95,"k"],[31,98,13,96],[31,101,13,99,"y"],[31,102,13,100],[31,103,13,101],[32,4,14,2],[32,5,14,3],[33,4,15,2,"apply"],[33,9,15,7],[33,11,15,9],[33,20,15,9,"apply"],[33,21,15,18,"point"],[33,26,15,23],[33,28,15,25],[34,6,16,4],[34,13,16,11],[34,14,16,12,"point"],[34,19,16,17],[34,20,16,18],[34,21,16,19],[34,22,16,20],[34,25,16,23],[34,29,16,27],[34,30,16,28,"k"],[34,31,16,29],[34,34,16,32],[34,38,16,36],[34,39,16,37,"x"],[34,40,16,38],[34,42,16,40,"point"],[34,47,16,45],[34,48,16,46],[34,49,16,47],[34,50,16,48],[34,53,16,51],[34,57,16,55],[34,58,16,56,"k"],[34,59,16,57],[34,62,16,60],[34,66,16,64],[34,67,16,65,"y"],[34,68,16,66],[34,69,16,67],[35,4,17,2],[35,5,17,3],[36,4,18,2,"applyX"],[36,10,18,8],[36,12,18,10],[36,21,18,10,"applyX"],[36,22,18,19,"x"],[36,23,18,20],[36,25,18,22],[37,6,19,4],[37,13,19,11,"x"],[37,14,19,12],[37,17,19,15],[37,21,19,19],[37,22,19,20,"k"],[37,23,19,21],[37,26,19,24],[37,30,19,28],[37,31,19,29,"x"],[37,32,19,30],[38,4,20,2],[38,5,20,3],[39,4,21,2,"applyY"],[39,10,21,8],[39,12,21,10],[39,21,21,10,"applyY"],[39,22,21,19,"y"],[39,23,21,20],[39,25,21,22],[40,6,22,4],[40,13,22,11,"y"],[40,14,22,12],[40,17,22,15],[40,21,22,19],[40,22,22,20,"k"],[40,23,22,21],[40,26,22,24],[40,30,22,28],[40,31,22,29,"y"],[40,32,22,30],[41,4,23,2],[41,5,23,3],[42,4,24,2,"invert"],[42,10,24,8],[42,12,24,10],[42,21,24,10,"invert"],[42,22,24,19,"location"],[42,30,24,27],[42,32,24,29],[43,6,25,4],[43,13,25,11],[43,14,25,12],[43,15,25,13,"location"],[43,23,25,21],[43,24,25,22],[43,25,25,23],[43,26,25,24],[43,29,25,27],[43,33,25,31],[43,34,25,32,"x"],[43,35,25,33],[43,39,25,37],[43,43,25,41],[43,44,25,42,"k"],[43,45,25,43],[43,47,25,45],[43,48,25,46,"location"],[43,56,25,54],[43,57,25,55],[43,58,25,56],[43,59,25,57],[43,62,25,60],[43,66,25,64],[43,67,25,65,"y"],[43,68,25,66],[43,72,25,70],[43,76,25,74],[43,77,25,75,"k"],[43,78,25,76],[43,79,25,77],[44,4,26,2],[44,5,26,3],[45,4,27,2,"invertX"],[45,11,27,9],[45,13,27,11],[45,22,27,11,"invertX"],[45,23,27,20,"x"],[45,24,27,21],[45,26,27,23],[46,6,28,4],[46,13,28,11],[46,14,28,12,"x"],[46,15,28,13],[46,18,28,16],[46,22,28,20],[46,23,28,21,"x"],[46,24,28,22],[46,28,28,26],[46,32,28,30],[46,33,28,31,"k"],[46,34,28,32],[47,4,29,2],[47,5,29,3],[48,4,30,2,"invertY"],[48,11,30,9],[48,13,30,11],[48,22,30,11,"invertY"],[48,23,30,20,"y"],[48,24,30,21],[48,26,30,23],[49,6,31,4],[49,13,31,11],[49,14,31,12,"y"],[49,15,31,13],[49,18,31,16],[49,22,31,20],[49,23,31,21,"y"],[49,24,31,22],[49,28,31,26],[49,32,31,30],[49,33,31,31,"k"],[49,34,31,32],[50,4,32,2],[50,5,32,3],[51,4,33,2,"rescaleX"],[51,12,33,10],[51,14,33,12],[51,23,33,12,"rescaleX"],[51,24,33,21,"x"],[51,25,33,22],[51,27,33,24],[52,6,34,4],[52,13,34,11,"x"],[52,14,34,12],[52,15,34,13,"copy"],[52,19,34,17],[52,20,34,18],[52,21,34,19],[52,22,34,20,"domain"],[52,28,34,26],[52,29,34,27,"x"],[52,30,34,28],[52,31,34,29,"range"],[52,36,34,34],[52,37,34,35],[52,38,34,36],[52,39,34,37,"map"],[52,42,34,40],[52,43,34,41],[52,47,34,45],[52,48,34,46,"invertX"],[52,55,34,53],[52,57,34,55],[52,61,34,59],[52,62,34,60],[52,63,34,61,"map"],[52,66,34,64],[52,67,34,65,"x"],[52,68,34,66],[52,69,34,67,"invert"],[52,75,34,73],[52,77,34,75,"x"],[52,78,34,76],[52,79,34,77],[52,80,34,78],[53,4,35,2],[53,5,35,3],[54,4,36,2,"rescaleY"],[54,12,36,10],[54,14,36,12],[54,23,36,12,"rescaleY"],[54,24,36,21,"y"],[54,25,36,22],[54,27,36,24],[55,6,37,4],[55,13,37,11,"y"],[55,14,37,12],[55,15,37,13,"copy"],[55,19,37,17],[55,20,37,18],[55,21,37,19],[55,22,37,20,"domain"],[55,28,37,26],[55,29,37,27,"y"],[55,30,37,28],[55,31,37,29,"range"],[55,36,37,34],[55,37,37,35],[55,38,37,36],[55,39,37,37,"map"],[55,42,37,40],[55,43,37,41],[55,47,37,45],[55,48,37,46,"invertY"],[55,55,37,53],[55,57,37,55],[55,61,37,59],[55,62,37,60],[55,63,37,61,"map"],[55,66,37,64],[55,67,37,65,"y"],[55,68,37,66],[55,69,37,67,"invert"],[55,75,37,73],[55,77,37,75,"y"],[55,78,37,76],[55,79,37,77],[55,80,37,78],[56,4,38,2],[56,5,38,3],[57,4,39,2,"toString"],[57,12,39,10],[57,14,39,12],[57,23,39,12,"toString"],[57,24,39,12],[57,26,39,23],[58,6,40,4],[58,13,40,11],[58,25,40,23],[58,28,40,26],[58,32,40,30],[58,33,40,31,"x"],[58,34,40,32],[58,37,40,35],[58,40,40,38],[58,43,40,41],[58,47,40,45],[58,48,40,46,"y"],[58,49,40,47],[58,52,40,50],[58,62,40,60],[58,65,40,63],[58,69,40,67],[58,70,40,68,"k"],[58,71,40,69],[58,74,40,72],[58,77,40,75],[59,4,41,2],[60,2,42,0],[60,3,42,1],[61,2,44,7],[61,6,44,11,"identity"],[61,14,44,19],[61,17,44,22],[61,21,44,26,"Transform"],[61,30,44,35],[61,31,44,36],[61,32,44,37],[61,34,44,39],[61,35,44,40],[61,37,44,42],[61,38,44,43],[61,39,44,44],[62,2,46,0,"transform"],[62,11,46,9],[62,12,46,10,"prototype"],[62,21,46,19],[62,24,46,22,"Transform"],[62,33,46,31],[62,34,46,32,"prototype"],[62,43,46,41],[63,2,48,15],[63,11,48,24,"transform"],[63,20,48,33,"transform"],[63,21,48,34,"node"],[63,25,48,38],[63,27,48,40],[64,4,49,2],[64,11,49,9],[64,12,49,10,"node"],[64,16,49,14],[64,17,49,15,"__zoom"],[64,23,49,21],[64,25,49,23],[64,29,49,27],[64,31,49,29,"node"],[64,35,49,33],[64,38,49,36,"node"],[64,42,49,40],[64,43,49,41,"parentNode"],[64,53,49,51],[64,54,49,52],[64,56,49,54],[64,63,49,61,"identity"],[64,71,49,69],[65,4,50,2],[65,11,50,9,"node"],[65,15,50,13],[65,16,50,14,"__zoom"],[65,22,50,20],[66,2,51,0],[67,0,51,1],[67,3]],"functionMap":{"names":["<global>","Transform","Transform.prototype.scale","Transform.prototype.translate","Transform.prototype.apply","Transform.prototype.applyX","Transform.prototype.applyY","Transform.prototype.invert","Transform.prototype.invertX","Transform.prototype.invertY","Transform.prototype.rescaleX","Transform.prototype.rescaleY","Transform.prototype.toString","transform"],"mappings":"AAA,OC;CDI;SEI;GFE;aGC;GHE;SIC;GJE;UKC;GLE;UMC;GNE;UOC;GPE;WQC;GRE;WSC;GTE;YUC;GVE;YWC;GXE;YYC;GZE;eaO;CbG"},"hasCjsExports":false},"type":"js/module"}]}