{"dependencies":[{"name":"d3-array","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":72,"index":72}}],"key":"6/g0OmizGembrwGL3ynTnrgY1Es=","exportNames":["*"],"imports":1}},{"name":"./init.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":73},"end":{"line":2,"column":36,"index":109}}],"key":"T/z5w4vOvjDtodMXYiKznwC3zLs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return quantile;\n    }\n  });\n  var _d3Array = require(_dependencyMap[0], \"d3-array\");\n  var _initJs = require(_dependencyMap[1], \"./init.js\");\n  function quantile() {\n    var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n    function rescale() {\n      var i = 0,\n        n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = (0, _d3Array.quantileSorted)(domain, i / n);\n      return scale;\n    }\n    function scale(x) {\n      return x == null || isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];\n    }\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];\n    };\n    scale.domain = function (_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(_d3Array.ascending);\n      return rescale();\n    };\n    scale.range = function (_) {\n      return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n    scale.quantiles = function () {\n      return thresholds.slice();\n    };\n    scale.copy = function () {\n      return quantile().domain(domain).range(range).unknown(unknown);\n    };\n    return _initJs.initRange.apply(scale, arguments);\n  }\n});","lineCount":55,"map":[[7,2,4,15,"Object"],[7,8,4,15],[7,9,4,15,"defineProperty"],[7,23,4,15],[7,24,4,15,"exports"],[7,31,4,15],[8,4,4,15,"enumerable"],[8,14,4,15],[9,4,4,15,"get"],[9,7,4,15],[9,18,4,15,"get"],[9,19,4,15],[10,6,4,15],[10,13,4,15,"quantile"],[10,21,4,15],[11,4,4,15],[12,2,4,15],[13,2,1,0],[13,6,1,0,"_d3Array"],[13,14,1,0],[13,17,1,0,"require"],[13,24,1,0],[13,25,1,0,"_dependencyMap"],[13,39,1,0],[14,2,2,0],[14,6,2,0,"_initJs"],[14,13,2,0],[14,16,2,0,"require"],[14,23,2,0],[14,24,2,0,"_dependencyMap"],[14,38,2,0],[15,2,4,15],[15,11,4,24,"quantile"],[15,19,4,32,"quantile"],[15,20,4,32],[15,22,4,35],[16,4,5,2],[16,8,5,6,"domain"],[16,14,5,12],[16,17,5,15],[16,19,5,17],[17,6,6,6,"range"],[17,11,6,11],[17,14,6,14],[17,16,6,16],[18,6,7,6,"thresholds"],[18,16,7,16],[18,19,7,19],[18,21,7,21],[19,6,8,6,"unknown"],[19,13,8,13],[20,4,10,2],[20,13,10,11,"rescale"],[20,20,10,18,"rescale"],[20,21,10,18],[20,23,10,21],[21,6,11,4],[21,10,11,8,"i"],[21,11,11,9],[21,14,11,12],[21,15,11,13],[22,8,11,15,"n"],[22,9,11,16],[22,12,11,19,"Math"],[22,16,11,23],[22,17,11,24,"max"],[22,20,11,27],[22,21,11,28],[22,22,11,29],[22,24,11,31,"range"],[22,29,11,36],[22,30,11,37,"length"],[22,36,11,43],[22,37,11,44],[23,6,12,4,"thresholds"],[23,16,12,14],[23,19,12,17],[23,23,12,21,"Array"],[23,28,12,26],[23,29,12,27,"n"],[23,30,12,28],[23,33,12,31],[23,34,12,32],[23,35,12,33],[24,6,13,4],[24,13,13,11],[24,15,13,13,"i"],[24,16,13,14],[24,19,13,17,"n"],[24,20,13,18],[24,22,13,20,"thresholds"],[24,32,13,30],[24,33,13,31,"i"],[24,34,13,32],[24,37,13,35],[24,38,13,36],[24,39,13,37],[24,42,13,40],[24,46,13,40,"threshold"],[24,54,13,49],[24,55,13,49,"quantileSorted"],[24,69,13,49],[24,71,13,50,"domain"],[24,77,13,56],[24,79,13,58,"i"],[24,80,13,59],[24,83,13,62,"n"],[24,84,13,63],[24,85,13,64],[25,6,14,4],[25,13,14,11,"scale"],[25,18,14,16],[26,4,15,2],[27,4,17,2],[27,13,17,11,"scale"],[27,18,17,16,"scale"],[27,19,17,17,"x"],[27,20,17,18],[27,22,17,20],[28,6,18,4],[28,13,18,11,"x"],[28,14,18,12],[28,18,18,16],[28,22,18,20],[28,26,18,24,"isNaN"],[28,31,18,29],[28,32,18,30,"x"],[28,33,18,31],[28,36,18,34],[28,37,18,35,"x"],[28,38,18,36],[28,39,18,37],[28,42,18,40,"unknown"],[28,49,18,47],[28,52,18,50,"range"],[28,57,18,55],[28,58,18,56],[28,62,18,56,"bisect"],[28,70,18,62],[28,71,18,62,"bisect"],[28,77,18,62],[28,79,18,63,"thresholds"],[28,89,18,73],[28,91,18,75,"x"],[28,92,18,76],[28,93,18,77],[28,94,18,78],[29,4,19,2],[30,4,21,2,"scale"],[30,9,21,7],[30,10,21,8,"invertExtent"],[30,22,21,20],[30,25,21,23],[30,35,21,32,"y"],[30,36,21,33],[30,38,21,35],[31,6,22,4],[31,10,22,8,"i"],[31,11,22,9],[31,14,22,12,"range"],[31,19,22,17],[31,20,22,18,"indexOf"],[31,27,22,25],[31,28,22,26,"y"],[31,29,22,27],[31,30,22,28],[32,6,23,4],[32,13,23,11,"i"],[32,14,23,12],[32,17,23,15],[32,18,23,16],[32,21,23,19],[32,22,23,20,"NaN"],[32,25,23,23],[32,27,23,25,"NaN"],[32,30,23,28],[32,31,23,29],[32,34,23,32],[32,35,24,6,"i"],[32,36,24,7],[32,39,24,10],[32,40,24,11],[32,43,24,14,"thresholds"],[32,53,24,24],[32,54,24,25,"i"],[32,55,24,26],[32,58,24,29],[32,59,24,30],[32,60,24,31],[32,63,24,34,"domain"],[32,69,24,40],[32,70,24,41],[32,71,24,42],[32,72,24,43],[32,74,25,6,"i"],[32,75,25,7],[32,78,25,10,"thresholds"],[32,88,25,20],[32,89,25,21,"length"],[32,95,25,27],[32,98,25,30,"thresholds"],[32,108,25,40],[32,109,25,41,"i"],[32,110,25,42],[32,111,25,43],[32,114,25,46,"domain"],[32,120,25,52],[32,121,25,53,"domain"],[32,127,25,59],[32,128,25,60,"length"],[32,134,25,66],[32,137,25,69],[32,138,25,70],[32,139,25,71],[32,140,26,5],[33,4,27,2],[33,5,27,3],[34,4,29,2,"scale"],[34,9,29,7],[34,10,29,8,"domain"],[34,16,29,14],[34,19,29,17],[34,29,29,26,"_"],[34,30,29,27],[34,32,29,29],[35,6,30,4],[35,10,30,8],[35,11,30,9,"arguments"],[35,20,30,18],[35,21,30,19,"length"],[35,27,30,25],[35,29,30,27],[35,36,30,34,"domain"],[35,42,30,40],[35,43,30,41,"slice"],[35,48,30,46],[35,49,30,47],[35,50,30,48],[36,6,31,4,"domain"],[36,12,31,10],[36,15,31,13],[36,17,31,15],[37,6,32,4],[37,11,32,9],[37,15,32,13,"d"],[37,16,32,14],[37,20,32,18,"_"],[37,21,32,19],[37,23,32,21],[37,27,32,25,"d"],[37,28,32,26],[37,32,32,30],[37,36,32,34],[37,40,32,38],[37,41,32,39,"isNaN"],[37,46,32,44],[37,47,32,45,"d"],[37,48,32,46],[37,51,32,49],[37,52,32,50,"d"],[37,53,32,51],[37,54,32,52],[37,56,32,54,"domain"],[37,62,32,60],[37,63,32,61,"push"],[37,67,32,65],[37,68,32,66,"d"],[37,69,32,67],[37,70,32,68],[38,6,33,4,"domain"],[38,12,33,10],[38,13,33,11,"sort"],[38,17,33,15],[38,18,33,16,"ascending"],[38,26,33,25],[38,27,33,25,"ascending"],[38,36,33,25],[38,37,33,26],[39,6,34,4],[39,13,34,11,"rescale"],[39,20,34,18],[39,21,34,19],[39,22,34,20],[40,4,35,2],[40,5,35,3],[41,4,37,2,"scale"],[41,9,37,7],[41,10,37,8,"range"],[41,15,37,13],[41,18,37,16],[41,28,37,25,"_"],[41,29,37,26],[41,31,37,28],[42,6,38,4],[42,13,38,11,"arguments"],[42,22,38,20],[42,23,38,21,"length"],[42,29,38,27],[42,33,38,31,"range"],[42,38,38,36],[42,41,38,39,"Array"],[42,46,38,44],[42,47,38,45,"from"],[42,51,38,49],[42,52,38,50,"_"],[42,53,38,51],[42,54,38,52],[42,56,38,54,"rescale"],[42,63,38,61],[42,64,38,62],[42,65,38,63],[42,69,38,67,"range"],[42,74,38,72],[42,75,38,73,"slice"],[42,80,38,78],[42,81,38,79],[42,82,38,80],[43,4,39,2],[43,5,39,3],[44,4,41,2,"scale"],[44,9,41,7],[44,10,41,8,"unknown"],[44,17,41,15],[44,20,41,18],[44,30,41,27,"_"],[44,31,41,28],[44,33,41,30],[45,6,42,4],[45,13,42,11,"arguments"],[45,22,42,20],[45,23,42,21,"length"],[45,29,42,27],[45,33,42,31,"unknown"],[45,40,42,38],[45,43,42,41,"_"],[45,44,42,42],[45,46,42,44,"scale"],[45,51,42,49],[45,55,42,53,"unknown"],[45,62,42,60],[46,4,43,2],[46,5,43,3],[47,4,45,2,"scale"],[47,9,45,7],[47,10,45,8,"quantiles"],[47,19,45,17],[47,22,45,20],[47,34,45,31],[48,6,46,4],[48,13,46,11,"thresholds"],[48,23,46,21],[48,24,46,22,"slice"],[48,29,46,27],[48,30,46,28],[48,31,46,29],[49,4,47,2],[49,5,47,3],[50,4,49,2,"scale"],[50,9,49,7],[50,10,49,8,"copy"],[50,14,49,12],[50,17,49,15],[50,29,49,26],[51,6,50,4],[51,13,50,11,"quantile"],[51,21,50,19],[51,22,50,20],[51,23,50,21],[51,24,51,9,"domain"],[51,30,51,15],[51,31,51,16,"domain"],[51,37,51,22],[51,38,51,23],[51,39,52,9,"range"],[51,44,52,14],[51,45,52,15,"range"],[51,50,52,20],[51,51,52,21],[51,52,53,9,"unknown"],[51,59,53,16],[51,60,53,17,"unknown"],[51,67,53,24],[51,68,53,25],[52,4,54,2],[52,5,54,3],[53,4,56,2],[53,11,56,9,"initRange"],[53,18,56,18],[53,19,56,18,"initRange"],[53,28,56,18],[53,29,56,19,"apply"],[53,34,56,24],[53,35,56,25,"scale"],[53,40,56,30],[53,42,56,32,"arguments"],[53,51,56,41],[53,52,56,42],[54,2,57,0],[55,0,57,1],[55,3]],"functionMap":{"names":["<global>","quantile","rescale","scale","scale.invertExtent","scale.domain","scale.range","scale.unknown","scale.quantiles","scale.copy"],"mappings":"AAA;eCG;ECM;GDK;EEE;GFE;uBGE;GHM;iBIE;GJM;gBKE;GLE;kBME;GNE;oBOE;GPE;eQE;GRK;CDG"},"hasCjsExports":false},"type":"js/module"}]}