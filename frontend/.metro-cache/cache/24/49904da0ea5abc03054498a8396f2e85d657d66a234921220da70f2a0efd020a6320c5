{"dependencies":[{"name":"d3-array","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":32,"index":32}}],"key":"6/g0OmizGembrwGL3ynTnrgY1Es=","exportNames":["*"],"imports":1}},{"name":"./linear.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":33},"end":{"line":2,"column":38,"index":71}}],"key":"suKeCidbwZn9gGj5VSO9qUqIGq8=","exportNames":["*"],"imports":1}},{"name":"./init.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":72},"end":{"line":3,"column":36,"index":108}}],"key":"T/z5w4vOvjDtodMXYiKznwC3zLs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return quantize;\n    }\n  });\n  var _d3Array = require(_dependencyMap[0], \"d3-array\");\n  var _linearJs = require(_dependencyMap[1], \"./linear.js\");\n  var _initJs = require(_dependencyMap[2], \"./init.js\");\n  function quantize() {\n    var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n    function scale(x) {\n      return x != null && x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;\n    }\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n    scale.domain = function (_) {\n      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];\n    };\n    scale.range = function (_) {\n      return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();\n    };\n    scale.invertExtent = function (y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];\n    };\n    scale.unknown = function (_) {\n      return arguments.length ? (unknown = _, scale) : scale;\n    };\n    scale.thresholds = function () {\n      return domain.slice();\n    };\n    scale.copy = function () {\n      return quantize().domain([x0, x1]).range(range).unknown(unknown);\n    };\n    return _initJs.initRange.apply((0, _linearJs.linearish)(scale), arguments);\n  }\n});","lineCount":53,"map":[[7,2,5,15,"Object"],[7,8,5,15],[7,9,5,15,"defineProperty"],[7,23,5,15],[7,24,5,15,"exports"],[7,31,5,15],[8,4,5,15,"enumerable"],[8,14,5,15],[9,4,5,15,"get"],[9,7,5,15],[9,18,5,15,"get"],[9,19,5,15],[10,6,5,15],[10,13,5,15,"quantize"],[10,21,5,15],[11,4,5,15],[12,2,5,15],[13,2,1,0],[13,6,1,0,"_d3Array"],[13,14,1,0],[13,17,1,0,"require"],[13,24,1,0],[13,25,1,0,"_dependencyMap"],[13,39,1,0],[14,2,2,0],[14,6,2,0,"_linearJs"],[14,15,2,0],[14,18,2,0,"require"],[14,25,2,0],[14,26,2,0,"_dependencyMap"],[14,40,2,0],[15,2,3,0],[15,6,3,0,"_initJs"],[15,13,3,0],[15,16,3,0,"require"],[15,23,3,0],[15,24,3,0,"_dependencyMap"],[15,38,3,0],[16,2,5,15],[16,11,5,24,"quantize"],[16,19,5,32,"quantize"],[16,20,5,32],[16,22,5,35],[17,4,6,2],[17,8,6,6,"x0"],[17,10,6,8],[17,13,6,11],[17,14,6,12],[18,6,7,6,"x1"],[18,8,7,8],[18,11,7,11],[18,12,7,12],[19,6,8,6,"n"],[19,7,8,7],[19,10,8,10],[19,11,8,11],[20,6,9,6,"domain"],[20,12,9,12],[20,15,9,15],[20,16,9,16],[20,19,9,19],[20,20,9,20],[21,6,10,6,"range"],[21,11,10,11],[21,14,10,14],[21,15,10,15],[21,16,10,16],[21,18,10,18],[21,19,10,19],[21,20,10,20],[22,6,11,6,"unknown"],[22,13,11,13],[23,4,13,2],[23,13,13,11,"scale"],[23,18,13,16,"scale"],[23,19,13,17,"x"],[23,20,13,18],[23,22,13,20],[24,6,14,4],[24,13,14,11,"x"],[24,14,14,12],[24,18,14,16],[24,22,14,20],[24,26,14,24,"x"],[24,27,14,25],[24,31,14,29,"x"],[24,32,14,30],[24,35,14,33,"range"],[24,40,14,38],[24,41,14,39],[24,45,14,39,"bisect"],[24,53,14,45],[24,54,14,45,"bisect"],[24,60,14,45],[24,62,14,46,"domain"],[24,68,14,52],[24,70,14,54,"x"],[24,71,14,55],[24,73,14,57],[24,74,14,58],[24,76,14,60,"n"],[24,77,14,61],[24,78,14,62],[24,79,14,63],[24,82,14,66,"unknown"],[24,89,14,73],[25,4,15,2],[26,4,17,2],[26,13,17,11,"rescale"],[26,20,17,18,"rescale"],[26,21,17,18],[26,23,17,21],[27,6,18,4],[27,10,18,8,"i"],[27,11,18,9],[27,14,18,12],[27,15,18,13],[27,16,18,14],[28,6,19,4,"domain"],[28,12,19,10],[28,15,19,13],[28,19,19,17,"Array"],[28,24,19,22],[28,25,19,23,"n"],[28,26,19,24],[28,27,19,25],[29,6,20,4],[29,13,20,11],[29,15,20,13,"i"],[29,16,20,14],[29,19,20,17,"n"],[29,20,20,18],[29,22,20,20,"domain"],[29,28,20,26],[29,29,20,27,"i"],[29,30,20,28],[29,31,20,29],[29,34,20,32],[29,35,20,33],[29,36,20,34,"i"],[29,37,20,35],[29,40,20,38],[29,41,20,39],[29,45,20,43,"x1"],[29,47,20,45],[29,50,20,48],[29,51,20,49,"i"],[29,52,20,50],[29,55,20,53,"n"],[29,56,20,54],[29,60,20,58,"x0"],[29,62,20,60],[29,67,20,65,"n"],[29,68,20,66],[29,71,20,69],[29,72,20,70],[29,73,20,71],[30,6,21,4],[30,13,21,11,"scale"],[30,18,21,16],[31,4,22,2],[32,4,24,2,"scale"],[32,9,24,7],[32,10,24,8,"domain"],[32,16,24,14],[32,19,24,17],[32,29,24,26,"_"],[32,30,24,27],[32,32,24,29],[33,6,25,4],[33,13,25,11,"arguments"],[33,22,25,20],[33,23,25,21,"length"],[33,29,25,27],[33,33,25,31],[33,34,25,32,"x0"],[33,36,25,34],[33,38,25,36,"x1"],[33,40,25,38],[33,41,25,39],[33,44,25,42,"_"],[33,45,25,43],[33,47,25,45,"x0"],[33,49,25,47],[33,52,25,50],[33,53,25,51,"x0"],[33,55,25,53],[33,57,25,55,"x1"],[33,59,25,57],[33,62,25,60],[33,63,25,61,"x1"],[33,65,25,63],[33,67,25,65,"rescale"],[33,74,25,72],[33,75,25,73],[33,76,25,74],[33,80,25,78],[33,81,25,79,"x0"],[33,83,25,81],[33,85,25,83,"x1"],[33,87,25,85],[33,88,25,86],[34,4,26,2],[34,5,26,3],[35,4,28,2,"scale"],[35,9,28,7],[35,10,28,8,"range"],[35,15,28,13],[35,18,28,16],[35,28,28,25,"_"],[35,29,28,26],[35,31,28,28],[36,6,29,4],[36,13,29,11,"arguments"],[36,22,29,20],[36,23,29,21,"length"],[36,29,29,27],[36,33,29,31,"n"],[36,34,29,32],[36,37,29,35],[36,38,29,36,"range"],[36,43,29,41],[36,46,29,44,"Array"],[36,51,29,49],[36,52,29,50,"from"],[36,56,29,54],[36,57,29,55,"_"],[36,58,29,56],[36,59,29,57],[36,61,29,59,"length"],[36,67,29,65],[36,70,29,68],[36,71,29,69],[36,73,29,71,"rescale"],[36,80,29,78],[36,81,29,79],[36,82,29,80],[36,86,29,84,"range"],[36,91,29,89],[36,92,29,90,"slice"],[36,97,29,95],[36,98,29,96],[36,99,29,97],[37,4,30,2],[37,5,30,3],[38,4,32,2,"scale"],[38,9,32,7],[38,10,32,8,"invertExtent"],[38,22,32,20],[38,25,32,23],[38,35,32,32,"y"],[38,36,32,33],[38,38,32,35],[39,6,33,4],[39,10,33,8,"i"],[39,11,33,9],[39,14,33,12,"range"],[39,19,33,17],[39,20,33,18,"indexOf"],[39,27,33,25],[39,28,33,26,"y"],[39,29,33,27],[39,30,33,28],[40,6,34,4],[40,13,34,11,"i"],[40,14,34,12],[40,17,34,15],[40,18,34,16],[40,21,34,19],[40,22,34,20,"NaN"],[40,25,34,23],[40,27,34,25,"NaN"],[40,30,34,28],[40,31,34,29],[40,34,35,10,"i"],[40,35,35,11],[40,38,35,14],[40,39,35,15],[40,42,35,18],[40,43,35,19,"x0"],[40,45,35,21],[40,47,35,23,"domain"],[40,53,35,29],[40,54,35,30],[40,55,35,31],[40,56,35,32],[40,57,35,33],[40,60,36,10,"i"],[40,61,36,11],[40,65,36,15,"n"],[40,66,36,16],[40,69,36,19],[40,70,36,20,"domain"],[40,76,36,26],[40,77,36,27,"n"],[40,78,36,28],[40,81,36,31],[40,82,36,32],[40,83,36,33],[40,85,36,35,"x1"],[40,87,36,37],[40,88,36,38],[40,91,37,10],[40,92,37,11,"domain"],[40,98,37,17],[40,99,37,18,"i"],[40,100,37,19],[40,103,37,22],[40,104,37,23],[40,105,37,24],[40,107,37,26,"domain"],[40,113,37,32],[40,114,37,33,"i"],[40,115,37,34],[40,116,37,35],[40,117,37,36],[41,4,38,2],[41,5,38,3],[42,4,40,2,"scale"],[42,9,40,7],[42,10,40,8,"unknown"],[42,17,40,15],[42,20,40,18],[42,30,40,27,"_"],[42,31,40,28],[42,33,40,30],[43,6,41,4],[43,13,41,11,"arguments"],[43,22,41,20],[43,23,41,21,"length"],[43,29,41,27],[43,33,41,31,"unknown"],[43,40,41,38],[43,43,41,41,"_"],[43,44,41,42],[43,46,41,44,"scale"],[43,51,41,49],[43,55,41,53,"scale"],[43,60,41,58],[44,4,42,2],[44,5,42,3],[45,4,44,2,"scale"],[45,9,44,7],[45,10,44,8,"thresholds"],[45,20,44,18],[45,23,44,21],[45,35,44,32],[46,6,45,4],[46,13,45,11,"domain"],[46,19,45,17],[46,20,45,18,"slice"],[46,25,45,23],[46,26,45,24],[46,27,45,25],[47,4,46,2],[47,5,46,3],[48,4,48,2,"scale"],[48,9,48,7],[48,10,48,8,"copy"],[48,14,48,12],[48,17,48,15],[48,29,48,26],[49,6,49,4],[49,13,49,11,"quantize"],[49,21,49,19],[49,22,49,20],[49,23,49,21],[49,24,50,9,"domain"],[49,30,50,15],[49,31,50,16],[49,32,50,17,"x0"],[49,34,50,19],[49,36,50,21,"x1"],[49,38,50,23],[49,39,50,24],[49,40,50,25],[49,41,51,9,"range"],[49,46,51,14],[49,47,51,15,"range"],[49,52,51,20],[49,53,51,21],[49,54,52,9,"unknown"],[49,61,52,16],[49,62,52,17,"unknown"],[49,69,52,24],[49,70,52,25],[50,4,53,2],[50,5,53,3],[51,4,55,2],[51,11,55,9,"initRange"],[51,18,55,18],[51,19,55,18,"initRange"],[51,28,55,18],[51,29,55,19,"apply"],[51,34,55,24],[51,35,55,25],[51,39,55,25,"linearish"],[51,48,55,34],[51,49,55,34,"linearish"],[51,58,55,34],[51,60,55,35,"scale"],[51,65,55,40],[51,66,55,41],[51,68,55,43,"arguments"],[51,77,55,52],[51,78,55,53],[52,2,56,0],[53,0,56,1],[53,3]],"functionMap":{"names":["<global>","quantize","scale","rescale","scale.domain","scale.range","scale.invertExtent","scale.unknown","scale.thresholds","scale.copy"],"mappings":"AAA;eCI;ECQ;GDE;EEE;GFK;iBGE;GHE;gBIE;GJE;uBKE;GLM;kBME;GNE;qBOE;GPE;eQE;GRK;CDG"},"hasCjsExports":false},"type":"js/module"}]}